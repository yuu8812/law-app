query findUser($_eq: String = "") {
  users(where: { authentication_id: { _eq: $_eq } }) {
    id
    name
    icon_url
  }
}

mutation createUser($authentication_id: String, $name: String, $icon_url: String) {
  insert_users(
    objects: { authentication_id: $authentication_id, name: $name, icon_url: $icon_url }
  ) {
    returning {
      id
    }
  }
}

mutation createWatchedLaw(
  $user_id: uuid = "00000000-0000-0000-0000-000000000000"
  $law_id: uuid = "00000000-0000-0000-0000-000000000000"
) {
  insert_law_views_one(object: { user_id: $user_id, law_id: $law_id }) {
    law_id
  }
}

query findLawsWhenCreateWorld($where: laws_bool_exp, $limit: Int = 10) {
  laws(where: $where, limit: $limit) {
    id
    law_revisions {
      id
      title
      type
      status
      category
    }
  }
}

query findArgumentsForCreateWorld(
  $limit: Int = 10
  $order_by: [arguments_order_by!] = {}
  $offset: Int = 0
  $where: arguments_bool_exp = {}
) {
  arguments(limit: $limit, order_by: $order_by, offset: $offset, where: $where) {
    id
    description
    user {
      id
      name
      icon_url
    }
    title
  }
}

mutation createWorld(
  $objects: [worlds_insert_input!] = []
  $on_conflict: worlds_on_conflict = { constraint: worlds_pkey1 }
) {
  insert_worlds(objects: $objects, on_conflict: $on_conflict) {
    returning {
      id
    }
  }
}

query findWorld($id: uuid = "") {
  worlds_by_pk(id: $id) {
    user {
      icon_url
      id
      name
    }
    world_arguments {
      argument {
        title
        description
        author_id
        id
      }
    }
    species_percentage {
      percentage
      species_name
    }
    world_citizens_aggregate {
      aggregate {
        count
      }
      nodes {
        citizen {
          name
          id
          species_asset {
            species {
              name
            }
            image_url
          }
        }
      }
    }
    world_categories {
      law_category {
        category_ja
        category_number
      }
    }
    world_chat_boxes {
      title
      status
      id
      description
      user {
        icon_url
        id
        name
      }
    }
    world_editable_users {
      user {
        icon_url
        id
        name
      }
    }
    world_histories {
      description
      editor_id
      title
      id
      official_language
      public_security
      markup_text_html
      markup_text
    }
    world_laws {
      law {
        id
        law_revisions {
          title
        }
      }
    }
    level
    world_editable_users_aggregate {
      aggregate {
        count
      }
    }
  }
}

query findWorlds(
  $limit: Int = 10
  $offset: Int = 0
  $order_by: [worlds_order_by!] = {}
  $where: worlds_bool_exp = {}
) {
  worlds(limit: $limit, offset: $offset, order_by: $order_by, where: $where) {
    world_arguments {
      argument {
        title
        description
        author_id
        id
      }
    }
    species_percentage {
      percentage
      species_name
    }
    level
    world_editable_users_aggregate {
      aggregate {
        count
      }
    }
    world_categories {
      law_category {
        category_ja
        category_number
      }
    }
    world_laws_aggregate {
      aggregate {
        count
      }
    }
    world_chat_boxes {
      title
      status
      id
      description
      user {
        icon_url
        id
        name
      }
    }
    world_editable_users {
      user {
        icon_url
        id
        name
      }
    }
    world_histories {
      description
      editor_id
      title
      id
      official_language
      public_security
    }
    world_laws {
      law {
        id
        law_revisions {
          title
        }
      }
    }
    id
    status
    user {
      id
      name
      icon_url
    }
    world_citizens_aggregate {
      aggregate {
        count
      }
    }
  }
}

subscription findChatsSub($id: uuid = "") {
  world_chat_boxes_by_pk(id: $id) {
    id
    description
    author_id
    title
    status
    world_chats {
      status
      text
      created_at
      user {
        icon_url
        id
        name
      }
      author_id
    }
  }
}

query findChatBoxes($_eq: uuid = "") {
  world_chat_boxes(where: { world_id: { _eq: $_eq } }) {
    id
    title
  }
}

mutation createChatForWorld($chat_box_id: uuid = "", $author_id: uuid = "", $text: String = "") {
  insert_world_chats_one(
    object: { chat_box_id: $chat_box_id, author_id: $author_id, text: $text }
  ) {
    id
  }
}

query findWorldReaction($like: Int, $star: Int, $world_id: uuid = "", $user_id: uuid = "") {
  worlds_by_pk(id: $world_id) {
    likeCount: world_reactions_aggregate(where: { type: { _eq: $like } }) {
      aggregate {
        count
      }
    }
    starCount: world_reactions_aggregate(where: { type: { _eq: $star } }) {
      aggregate {
        count
      }
    }
    world_citizens_aggregate {
      aggregate {
        count
      }
    }
    isLiked: world_reactions(where: { user_id: { _eq: $user_id }, type: { _eq: $like } }) {
      user_id
      world_id
    }
    isStared: world_reactions(where: { user_id: { _eq: $user_id }, type: { _eq: $star } }) {
      user_id
      world_id
    }
  }
}

mutation createReactionForWorld($type: Int = 0, $user_id: uuid = "", $world_id: uuid = "") {
  insert_world_reactions_one(object: { type: $type, user_id: $user_id, world_id: $world_id }) {
    user_id
    world_id
  }
}

mutation deleteReactionForWorld($user_id: uuid = "", $world_id: uuid = "", $type: Int = 0) {
  delete_world_reactions_by_pk(type: $type, user_id: $user_id, world_id: $world_id) {
    user_id
    world_id
    type
  }
}

query findCitizens(
  $order_by: [citizens_order_by!] = {}
  $where: citizens_bool_exp = {}
  $limit: Int = 10
  $offset: Int = 0
) {
  citizens(where: $where, order_by: $order_by, limit: $limit, offset: $offset) {
    id
    gender
    name
    species_asset {
      image_url
      personality
      species {
        name
        description
      }
    }
  }
}

query findCitizensNotBelongToWorldByUserId(
  $order_by: [citizens_order_by!] = {}
  $offset: Int = 10
  $limit: Int = 10
  $where: citizens_bool_exp = { world_citizens: { citizen_id: { _is_null: true } } }
  $id: uuid = ""
) {
  users_by_pk(id: $id) {
    citizens(order_by: $order_by, offset: $offset, limit: $limit, where: $where) {
      id
      name
      species_asset {
        image_url
        personality
        species {
          name
        }
      }
    }
  }
}

mutation createWorldCitizens($objects: [world_citizens_insert_input!] = {}) {
  insert_world_citizens(objects: $objects) {
    returning {
      citizen_id
      world_id
    }
  }
}
